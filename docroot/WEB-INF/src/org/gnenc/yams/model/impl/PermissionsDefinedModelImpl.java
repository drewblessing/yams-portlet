/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gnenc.yams.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import org.gnenc.yams.model.PermissionsDefined;
import org.gnenc.yams.model.PermissionsDefinedModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PermissionsDefined service. Represents a row in the &quot;yams_PermissionsDefined&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gnenc.yams.model.PermissionsDefinedModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PermissionsDefinedImpl}.
 * </p>
 *
 * @author Drew A. Blessing
 * @see PermissionsDefinedImpl
 * @see org.gnenc.yams.model.PermissionsDefined
 * @see org.gnenc.yams.model.PermissionsDefinedModel
 * @generated
 */
public class PermissionsDefinedModelImpl extends BaseModelImpl<PermissionsDefined>
	implements PermissionsDefinedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a permissions defined model instance should use the {@link org.gnenc.yams.model.PermissionsDefined} interface instead.
	 */
	public static final String TABLE_NAME = "yams_PermissionsDefined";
	public static final Object[][] TABLE_COLUMNS = {
			{ "permissionKey", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "bitLocation", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table yams_PermissionsDefined (permissionKey VARCHAR(75) not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,bitLocation INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table yams_PermissionsDefined";
	public static final String ORDER_BY_JPQL = " ORDER BY permissionsDefined.bitLocation ASC";
	public static final String ORDER_BY_SQL = " ORDER BY yams_PermissionsDefined.bitLocation ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gnenc.yams.model.PermissionsDefined"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gnenc.yams.model.PermissionsDefined"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.gnenc.yams.model.PermissionsDefined"),
			true);
	public static long BITLOCATION_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gnenc.yams.model.PermissionsDefined"));

	public PermissionsDefinedModelImpl() {
	}

	public String getPrimaryKey() {
		return _permissionKey;
	}

	public void setPrimaryKey(String primaryKey) {
		setPermissionKey(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return _permissionKey;
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	public Class<?> getModelClass() {
		return PermissionsDefined.class;
	}

	public String getModelClassName() {
		return PermissionsDefined.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("permissionKey", getPermissionKey());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("bitLocation", getBitLocation());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String permissionKey = (String)attributes.get("permissionKey");

		if (permissionKey != null) {
			setPermissionKey(permissionKey);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer bitLocation = (Integer)attributes.get("bitLocation");

		if (bitLocation != null) {
			setBitLocation(bitLocation);
		}
	}

	public String getPermissionKey() {
		if (_permissionKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _permissionKey;
		}
	}

	public void setPermissionKey(String permissionKey) {
		_permissionKey = permissionKey;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public int getBitLocation() {
		return _bitLocation;
	}

	public void setBitLocation(int bitLocation) {
		_columnBitmask = -1L;

		if (!_setOriginalBitLocation) {
			_setOriginalBitLocation = true;

			_originalBitLocation = _bitLocation;
		}

		_bitLocation = bitLocation;
	}

	public int getOriginalBitLocation() {
		return _originalBitLocation;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public PermissionsDefined toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (PermissionsDefined)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		PermissionsDefinedImpl permissionsDefinedImpl = new PermissionsDefinedImpl();

		permissionsDefinedImpl.setPermissionKey(getPermissionKey());
		permissionsDefinedImpl.setCompanyId(getCompanyId());
		permissionsDefinedImpl.setUserId(getUserId());
		permissionsDefinedImpl.setUserName(getUserName());
		permissionsDefinedImpl.setCreateDate(getCreateDate());
		permissionsDefinedImpl.setModifiedDate(getModifiedDate());
		permissionsDefinedImpl.setBitLocation(getBitLocation());

		permissionsDefinedImpl.resetOriginalValues();

		return permissionsDefinedImpl;
	}

	public int compareTo(PermissionsDefined permissionsDefined) {
		int value = 0;

		if (getBitLocation() < permissionsDefined.getBitLocation()) {
			value = -1;
		}
		else if (getBitLocation() > permissionsDefined.getBitLocation()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		PermissionsDefined permissionsDefined = null;

		try {
			permissionsDefined = (PermissionsDefined)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		String primaryKey = permissionsDefined.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		PermissionsDefinedModelImpl permissionsDefinedModelImpl = this;

		permissionsDefinedModelImpl._originalBitLocation = permissionsDefinedModelImpl._bitLocation;

		permissionsDefinedModelImpl._setOriginalBitLocation = false;

		permissionsDefinedModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PermissionsDefined> toCacheModel() {
		PermissionsDefinedCacheModel permissionsDefinedCacheModel = new PermissionsDefinedCacheModel();

		permissionsDefinedCacheModel.permissionKey = getPermissionKey();

		String permissionKey = permissionsDefinedCacheModel.permissionKey;

		if ((permissionKey != null) && (permissionKey.length() == 0)) {
			permissionsDefinedCacheModel.permissionKey = null;
		}

		permissionsDefinedCacheModel.companyId = getCompanyId();

		permissionsDefinedCacheModel.userId = getUserId();

		permissionsDefinedCacheModel.userName = getUserName();

		String userName = permissionsDefinedCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			permissionsDefinedCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			permissionsDefinedCacheModel.createDate = createDate.getTime();
		}
		else {
			permissionsDefinedCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			permissionsDefinedCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			permissionsDefinedCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		permissionsDefinedCacheModel.bitLocation = getBitLocation();

		return permissionsDefinedCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{permissionKey=");
		sb.append(getPermissionKey());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", bitLocation=");
		sb.append(getBitLocation());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("org.gnenc.yams.model.PermissionsDefined");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>permissionKey</column-name><column-value><![CDATA[");
		sb.append(getPermissionKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bitLocation</column-name><column-value><![CDATA[");
		sb.append(getBitLocation());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PermissionsDefined.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			PermissionsDefined.class
		};
	private String _permissionKey;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _bitLocation;
	private int _originalBitLocation;
	private boolean _setOriginalBitLocation;
	private long _columnBitmask;
	private PermissionsDefined _escapedModelProxy;
}